% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lp.tools.R
\docType{class}
\name{LPProblem}
\alias{LPProblem}
\title{Solve a Linear Programming (LP) problem with \code{lp.tools}}
\format{\code{\link{R6Class}} object.}
\usage{
# lpp <- LPProblem$new(num.v = 10)
}
\value{
Object of \code{\link{R6Class}} LPP
}
\description{
The \code{LPProblem} class is the core of the \code{lp.tools} package. TODO: more
}
\details{
Details: TODO.
}
\section{Fields}{

\describe{
\item{\code{num.v}}{Number of variables in the liner problem.}
}}

\section{Methods}{


\describe{
  \item{\code{LPProblem$new(...)}}{Creates a new \code{LPProblem}. Usually the first step, before providing more information about the LP Problem.}
  \item{\code{AddConstraint(...)}}{Add one or more linear constraints.}
  \item{\code{TODO: All other methods}}{TODO}
  
}
}

\section{Actives (aka Properties)}{

  
\describe{
 \item{\code{num.v}}{Number of variables in the liner problem.}
 
}
}

\examples{

require(lp.tools)
require(Matrix)
num.v <- 10
set.seed(60606)
lpp <- 
  LPProblem$new(num.v)$
  SetObjective(objective = rep(1, num.v), description = "Sum", direction = "max")$
  AddConstraint(description = "Upper Bound",
                mat = Diagonal(num.v), 
                rhs = 1, 
                dir = "<=")$
  AddConstraint(description = "Random Bounds", 
                mat = matrix(runif(3 * num.v), ncol=num.v),
                rhs = 1, 
                dir = "<=")$
  AddConstraint(description = "Random Bound", 
                mat = runif(num.v),
                rhs = 1, 
                dir = "<=")$
  AddConstraint(description = "Random Bounds", 
                mat = Matrix(matrix(runif(3 * (num.v - 1)), ncol=(num.v - 1))),
                rhs = 1, 
                dir = "<=")
lpp$GetCostOfConstraint()
lpp$RemoveConstraint("UpperBounds")
LPProblem$new(num.v, lock.variables = rep(.3, 4))$
SetObjective(objective = rep(1, num.v), 
             description = "Sum", direction = "max")$
AddConstraint(description = "Upper Bound", 
              mat = Diagonal(num.v), 
              rhs = 1, 
              dir = "<=")$
GetSolution()

set.seed(60606)
lpp <- 
  LPProblem$new(num.v, lock.variables = rep(.3, 4))$
  SetObjective(objective.numer = runif(num.v), 
               objective.denom  = runif(num.v), 
               description = "Fraction", direction = "max")$
  AddConstraint(description = "Upper Bound", 
                mat = Diagonal(num.v), 
                rhs = 1, 
                dir = "<=")
lpp$CheckConstraints(solution = lpp$GetSolution()$solution + .01)
}
\keyword{LP}
\keyword{Linear}
\keyword{Programming,}
